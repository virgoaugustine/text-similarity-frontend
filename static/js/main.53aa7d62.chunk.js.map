{"version":3,"sources":["components/Navigation/Navigation.js","components/Login/Login.js","components/Register/Register.js","components/TextField/TextField.js","components/Results/Results.js","components/UserInfo/UserInfo.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","style","display","justifyContent","onClick","className","Login","props","onLoginClick","fetch","apiURL","method","headers","body","JSON","stringify","username","state","password","then","response","json","data","payload","loadUser","catch","err","console","log","getInput","event","setState","target","name","value","id","onChange","this","type","Component","Register","onRegisterClick","email","errorMessage","TextField","field","textInput","aria-describedby","Results","compare","similarity","UserInfo","user","tokens","initialState","route","isSigned","text1","text2","App","errorDetected","error","getTextFieldInput","onCompareClick","Message","Object","assign","renderSwitch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.53aa7d62.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({onRouteChange}) => {\n    return (\n        <nav style={{display: 'flex', justifyContent:'flex-end'}}>\n            <p onClick={() => onRouteChange('login')} className=\"f3 link dim black underline pa3 pointer\">Logout</p>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport { apiURL } from '../..';\n\nimport './Login.css';\n\nclass Login extends Component {\n    constructor(props){\n        super(props)\n        this.state ={\n            username: '',\n            password: '',\n        }\n    }\n\n    onLoginClick = () => {\n        fetch(`${apiURL}/login`, {\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.payload.username){\n                this.props.loadUser(data.payload)\n                this.props.onRouteChange('home')\n            }\n        })\n        .catch(err => console.log('Wrong Credentials'))\n       \n        \n    }\n\n    getInput = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    render(){\n       \n        return(\n            <div className=\"mt6\">\n            <article className=\"br3 b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center bg-near-white\">\n            <main className=\"pa4 black-80\">\n               <div className=\"measure\">\n                   <fieldset id=\"login\" className=\"ba b--transparent ph0 mh0\">\n                   <legend className=\"f2 fw6 ph0 mh0 tc\">Sign In</legend>\n                   <div className=\"mt3\">\n                       <label className=\"db fw6 lh-copy f6\">Username</label>\n                       <input onChange = {this.getInput}\n                       className=\"pa2 input-reset ba bg-transparent hover-bg-near-black hover-white w-100\" type=\"text\" name=\"username\"  id=\"username\" />\n                   </div>\n                   <div className=\"mv3\">\n                       <label className=\"db fw6 lh-copy f6\">Password</label>\n                       <input onChange = {this.getInput}\n                       className=\"b pa2 input-reset ba bg-transparent hover-bg-near-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n                   </div>\n                   </fieldset>\n                   <div>\n                   <input onClick={this.onLoginClick} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign in\" />\n                   </div>\n                   <div className=\"lh-copy mt3\">\n                       <p onClick={() => this.props.onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\n                   </div>\n               </div>\n           </main>\n           </article>\n           </div>\n        )\n    }\n\n}\n\nexport default Login;","import React, {Component} from 'react';\nimport { apiURL } from '../..';\nimport './Register.css';\n\n\nclass Register extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            name: '',\n            username: '',\n            email: '',\n            password: '',\n            errorMessage: ''\n        }\n    }\n\n    onRegisterClick = () => {\n        fetch(`${apiURL}/register`, {\n            method:'post',\n            headers:{'Content-Type':'application/json'},\n            body: JSON.stringify({\n                name: this.state.name,\n                username: this.state.username,\n                email: this.state.email,\n                password: this.state.password\n            })\n        })\n        .then(response => response.json())\n        .then(data =>{\n            console.log(data)\n            if (data.payload.username) {\n                this.props.loadUser(data.payload)\n                this.props.onRouteChange('home')\n            }\n        })\n        .catch(err => console.log(err) )\n        \n    }\n\n    getInput = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n\n    render(){\n        return(\n            <div className='mt6'>\n            <article className=\"br3 b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center bg-near-white\">\n            <main className=\"pa4 black-80\">\n            <div className=\"measure\">\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n            <legend className=\"f2 fw6 ph0 mh0 tc\">Sign Up</legend>\n            \n            <div className=\"mt3\">\n            <label className=\"db fw6 lh-copy f6\">Name</label>\n            <input onChange = {this.getInput}\n            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"name\" name=\"name\"  id=\"name\" />\n            </div>\n\n            <div className=\"mt3\">\n            <label className=\"db fw6 lh-copy f6\">Username</label>\n            <input onChange = {this.getInput}\n            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"name\" name=\"username\"  id=\"username\" />\n            </div>\n            <div className=\"mt3\">\n            <label className=\"db fw6 lh-copy f6\" >Email</label>\n            <input onChange = {this.getInput}\n            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email\"  id=\"email-address\" />\n            </div>\n            <div className=\"mv3\">\n            <label className=\"db fw6 lh-copy f6\">Password</label>\n            <input onChange = {this.getInput}\n            className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n            </div>\n            </fieldset>\n            <div className=\"\">\n            <input onClick={this.onRegisterClick} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Register\" />\n            </div>\n            <div className=\"lh-copy mt3\">\n            <p onClick={() => this.props.onRouteChange('login')} className=\"f6 link dim black db pointer\">Login</p>\n            </div>\n            </div>\n            </main>\n            </article>\n            </div>\n       \n        )\n    }\n\n}\n\nexport default Register;","import React from 'react';\nimport './TextField.css';\n\nconst TextField = ({ field, textInput }) => {\n\n    return (\n<article className=\"pa4 black-80 mw6 center\">\n  <div>\n    <label className=\"f6 b db mb2 tc\">{`Text ${field}`}</label>\n    <textarea id=\"comment\" name={`text${field}`} \n    onChange={textInput} className=\"db border-box hover-black w-100 measure ba b--black-20 pa1 br2 mb2\" aria-describedby=\"comment-desc\"></textarea>\n  </div>\n</article>\n    )\n\n}\n\nexport default TextField;","import React from 'react';\n\nconst Results = ({ compare, similarity}) =>{\n    return(\n    <div>\n        <div className=\"customCenter\">\n            <button className=\"f6 grow no-underline br-pill ba bw2 ph3 pv2 mb2 dib navy\"\n            onClick={compare}>Compare</button>\n        </div>\n        <div className=\"br3 b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center tc pa4 bg-near-white\">\n        {similarity}\n        </div>\n    </div>\n    )\n}\n\nexport default Results;","import React from 'react';\nimport './UserInfo.css';\n\nconst UserInfo = ({user, tokens}) => {\n    if (tokens > 0)\n    {\n        return (\n        <div>\n            <div className=\"white f3\">\n                {`Hello ${user}, you currently have `} \n                <span className=\"white f1\">{tokens}</span>\n                {tokens > 1 ? ` tokens.` : ` token.`}\n            </div>\n        \n        </div>\n        )\n    } else {\n        return (\n            <div>\n                <div className=\"white f3\">\n                    {`Hello ${user}, you currently have `} \n                    <span className=\"white f1\">0</span>\n                    {` tokens. Please contact the admin to buy more.`}\n                </div>\n            \n            </div>\n            )\n    }\n}\n\nexport default UserInfo;","import React, {Component} from 'react';\nimport './App.css';\nimport { apiURL } from './index';\n\nimport Navigation from './components/Navigation/Navigation';\nimport Login from './components/Login/Login';\nimport Register from './components/Register/Register';\nimport TextField from './components/TextField/TextField';\nimport Results from './components/Results/Results';\nimport UserInfo from './components/UserInfo/UserInfo';\n\nconst initialState = {\n  route: 'login',\n  isSigned:false,\n  user: {\n    name: '',\n    username: '',\n    tokens: ''\n    },\n  text1: '',\n  text2: '',\n  similarity: '',\n  errorMessage: '',\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = initialState;\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'home') this.setState({isSigned: true})\n    if (route === 'login') this.setState(initialState);\n\n    this.setState({route: route})\n  }\n\n  errorDetected = (error) => {\n    this.setState({errorMessage: error})\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        name: data.name,\n        username: data.username,\n        tokens: data.tokens\n      }\n    })\n  }\n\n  getTextFieldInput = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n \n  onCompareClick = () => {\n    fetch(`${apiURL}/detect`, {\n      method: 'post',\n      headers:{'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        username: this.state.user.username,\n        text1: this.state.text1,\n        text2: this.state.text2,\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      if(data.Message){\n      this.setState({similarity: data.Message})\n      \n      fetch(`${apiURL}/tokenCount`,{\n        method: 'put',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ username: this.state.user.username })\n      })\n      .then(response => response.json())\n      .then( data => this.setState(Object.assign(this.state.user, {tokens: data.payload})))\n\n      }\n    })\n   \n\n    \n  }\n\n\n  renderSwitch = (route) => {\n    switch (route) {\n      default:\n        return ( <p>Error Loading Page</p>)\n\n      case 'login':\n        return (<Login onRouteChange = {this.onRouteChange} loadUser = {this.loadUser} errorDetected={this.errorDetected}/>)\n      \n      case 'register':\n        return (<Register onRouteChange = {this.onRouteChange} loadUser={this.loadUser}/>)\n\n\n      case 'home':\n        return (\n          <div>\n            \n            <div className=\"nav\">\n              <Navigation onRouteChange={this.onRouteChange}/>\n            </div>\n            <div>\n              <UserInfo user={this.state.user.name} tokens={this.state.user.tokens}/>\n            </div>\n            <div className=\"cf pa4 center\">\n              <div className=\"fl w-50 bg-near-white tc\">\n              <TextField field={1} textInput={this.getTextFieldInput}/>\n              </div>\n              <div className=\"fl w-50 bg-light-gray tc\">\n                <TextField field={2} textInput={this.getTextFieldInput}/>\n              </div>\n            </div>\n            <div className='results'>\n              <Results compare={this.onCompareClick} similarity={this.state.similarity}/>\n            </div>\n          </div>\n        )\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n       {this.renderSwitch(this.state.route)}\n       { this.state.errorMessage ? <h3 className=\"error\"> { this.state.errorMessage } </h3> : null}\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\n\nexport const apiURL = 'https://text-similarity-api.herokuapp.com';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}